#!/bin/bash

echo "🔧 Finalizing FlowChain repo..."

# Ensure docs folder exists
mkdir -p docs

# -----------------------------
# 1. Create FLOWCHAIN_BUILDER_GUIDE.md
# -----------------------------
cat > docs/FLOWCHAIN_BUILDER_GUIDE.md <<EOF
# FlowChain Builder Guide

This guide helps developers, contributors, or agents working with a FlowChain-enabled project.

---

## 1. What is FlowChain?

A proof-driven, state-locked protocol for managing structured project development across distinct phases:
- Bootstrap
- Init
- Design
- Build
- Drift & Validation
- Completion

---

## 2. Core Concepts

- **Enforcement Levels** (0–4)
- **State Locking** via \`flow_state.json\`
- **Validation Engine** in \`init.sh\`
- **Proof Chain**: irreversible phase transitions

---

## 3. Directory Structure

\`\`\`
/core/         → Protocol logic
/docs/         → Documentation
/interfaces/   → GPT, CLI, GitHub integration layers
/templates/    → Starter forms and markdowns
\`\`\`

---

## 4. Developer Workflow

\`\`\`bash
./core/init.sh             # Scaffold + validate files
vim docs/DESIGN_GUIDE.md   # Define project
cat core/flow_state.json   # Check current phase
\`\`\`

---

## 5. Agent Behavior (Optional)

- Read \`project_form.json\`
- Confirm state from \`flow_state.json\`
- Avoid forward progression unless unlocked

---

## 6. Best Practices

- Don’t skip phases
- Mirror JSON and Markdown inputs
- Rely on \`init.sh\` to enforce compliance

---

## 7. Versioning

Use Git tags to mark protocol progress:
\`git tag v1.0\`

EOF

echo "✅ Created docs/FLOWCHAIN_BUILDER_GUIDE.md"

# -----------------------------
# 2. Create .gitignore if missing
# -----------------------------
if [ ! -f .gitignore ]; then
cat > .gitignore <<EOF
# Node / Python / temp tools
node_modules/
__pycache__/
*.pyc

# Logs / system artifacts
*.log
.DS_Store

# FlowChain backups / state transitions
flow_state.backup.json
*.tmp
*.bak

# OS/editor files
*.swp
*.swo
.idea/
.vscode/

# Output folders (if generated by agents/scripts)
dist/
build/

# Ignore everything auto-generated unless explicitly needed
.env
EOF
echo "✅ Created .gitignore"
else
echo "ℹ️  .gitignore already exists"
fi

# -----------------------------
# 3. Git Commit & Push Workflow
# -----------------------------
echo "🔐 Committing and pushing FlowChain repo..."

git add .
git commit -m "Finalize FlowChain repo: builder guide, gitignore, and structure lock"
git branch -M main

# Update YOUR_GITHUB_REMOTE_URL before running!
git remote add origin https://github.com/YOUR_USERNAME/flowchain.git 2>/dev/null
git push -u origin main

echo "✅ FlowChain finalized and pushed to remote."
